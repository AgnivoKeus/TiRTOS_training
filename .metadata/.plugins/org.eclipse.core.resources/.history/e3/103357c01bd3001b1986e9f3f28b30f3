/*
 * Copyright (c) 2015-2019, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 *  ======== hello.c ========
 */

#include <stdio.h>
/* XDC Module Headers */
#include <xdc/std.h>
#include <xdc/runtime/System.h>

#include <ti/sysbios/hal/Hwi.h>
#include <xdc/runtime/Error.h>

/* BIOS Module Headers */
#include <ti/sysbios/BIOS.h>

#include <ti/drivers/Board.h>
#include<ti/drivers/Timer.h>
#include<ti/drivers/GPIO.h>
#include"ti_drivers_config.h"

/*
 *  ======== main ========
 */


void timerISR(UArg arg){
    printf("ISR called!\n");
    GPIO_toggle(CONFIG_GPIO_LED1);
}

void timerISR2(Timer_Handle tHandle, uint_fast16_t status){
    printf("ISR 2 called\n");
}

int main()
{
    /* Call driver init functions */
    Board_init();

    Hwi_Handle myHwi;
    Hwi_Params hParams;
    Error_Block eb;

    Timer_Handle tHandle;
    Timer_Params tParams;

    Error_init(&eb);
    Hwi_Params_init(&hParams);
    hParams.enableInt = false;

    myHwi = Hwi_create(33, timerISR, &hParams, &eb);

    if (myHwi == NULL) {
    System_abort("Hwi create failed");
    }

    Timer_Params_init(&tParams);
    tParams.timerMode = Timer_CONTINUOUS_CALLBACK;
    tParams.periodUnits = Timer_PERIOD_HZ;
    tParams.period = 5;
    tParams.timerCallback = timerISR2;

    tHandle = Timer_open(timer0,&tParams);
    if(tHandle == NULL){
        printf("Error opening timer instance. \n");
        while(1){}
    }


    Hwi_enableInterrupt(31);
    Timer_start(tHandle);
    /*
     *  normal BIOS programs, would call BIOS_start() to enable interrupts
     *  and start the scheduler and kick BIOS into gear.  But, this program
     *  is a simple sanity test and calls BIOS_exit() instead.
     */
    BIOS_start();
    return(0);
}
